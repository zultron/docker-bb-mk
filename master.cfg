# -*- python -*-
# ex: set syntax=python:

# Set up docker-bb configuration
import os, sys
topdir = os.path.realpath(os.path.dirname(__file__))
pythondir = os.path.join(topdir, 'lib', 'python')
sys.path.append(pythondir)

from dbb.config import config as Config
config = Config(os.path.join(topdir, "config.yaml"))


from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We
# also use a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each
# element is a BuildSlave object, specifying a unique slave name and
# password.  The same slave name and password must be configured on
# the slave.
c['slaves'] = [ buildslave.BuildSlave(s, config.slave_password(s))
                for s in config.slaves() ]

# 'protocols' contains information about protocols which master will
# use for communicating with slaves.
#
# You must define at least 'port' option that slaves could connect to
# your master with this protocol.
#
# 'port' must match the value configured into the buildslaves (with
# their --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find
# out about source code changes.  Here we point to the buildbot clone
# of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        config.git_repo,
        workdir='gitpoller-workdir', branch=config.git_branch,
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming
# changes.

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
        name="all",
        change_filter=util.ChangeFilter(branch='master'),
        treeStableTimer=None,
        builderNames=["build"]))
c['schedulers'].append(schedulers.ForceScheduler(
        name="force",
        builderNames=["build"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to
# perform a build: what steps, and which slaves can execute them.
# Note that any particular build will only take place on one slave.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(
        repourl=config.git_repo,
        branch=config.git_branch,
        mode='full',
        haltOnFailure=True,
        ))
# run autoconf
factory.addStep(
    steps.ShellCommand(
        name="autoconf",
        workdir="build/src",
        command=["./autogen.sh"],
        haltOnFailure=True,
        ))
# configure source
factory.addStep(
    steps.ShellCommand(
        name="configure",
        workdir="build/src",
        command=["./configure"] + \
            [ '--with-%s' % f for f in config.slave_flavors()],
        haltOnFailure=True,
        ))
# compile source
factory.addStep(
    steps.Compile(
        name="build",
        workdir="build/src",
        command=["make", "V=1"],
        warningPattern="^Warning: ",
        haltOnFailure=True,
        ))
# make setuid
factory.addStep(
    steps.ShellCommand(
        name="setuid",
        workdir="build/src",
        command=["sudo", "make", "setuid"],
        haltOnFailure=True,
        ))
# regression tests
factory.addStep(
    steps.ShellCommand(
        name="test",
        workdir="build/src",
        command=["bash", "-c", ". ../scripts/rip-environment; runtests -v"],
        haltOnFailure=True,
        ))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(
        name="build",
        slavenames=config.slaves(),
        factory=factory,
        ))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will
# be pushed to these targets. buildbot/status/*.py has a variety to
# choose from, including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([ (user,config.admin_users[user])
                          for user in config.admin_users ]),
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
    gracefulShutdown = 'auth',
    cleanShutdown = 'auth',
    )
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = config.web_title
c['titleURL'] = config.web_titleURL

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = config.buildbotURL

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
    }
